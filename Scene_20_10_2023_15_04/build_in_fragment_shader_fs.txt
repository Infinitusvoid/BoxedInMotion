#version 330 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;
in vec4 Color;
in vec3 FragWorldPos; // Input world space position
in vec3 FragObjectPos; // Input object space position


uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;

// additional inputs
flat in int msg_frag_id;
in vec3 msg_frag_instance_position;

// ======================
// Defines constants 

#define PI 3.14159265359
#define TAO ( PI * 2.0 )
#define PI_2 ( PI * 2.0 )

#define SQRT_OF_2 1.4142135623730951

// ========================================
// Utils
// Define a function to generate a random number based on an input integer
float generateRandomNumber(int inputInt)
{
    // Cast the input integer to uint to address type mismatch
    uint seed = uint(inputInt);

    // Define the hash function
    seed = (seed ^ 61u) ^ (seed >> 16u);
    seed *= 9u;
    seed = seed ^ (seed >> 4u);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15u);

    // Normalize and return the result
    return float(seed) / 4294967296.0; // Normalize to [0, 1]
}

// cosine based palette, 4 vec3 params
vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

float distance_from_sphere(in vec3 p, in vec3 c, in float r)
{
    return length(p - c) - r;
}

float opUnion( float d1, float d2 ) { return min(d1,d2); }

float opSubtraction( float d1, float d2 ) { return max(-d1,d2); }

float opIntersection( float d1, float d2 ) { return max(d1,d2); }

float opSmoothUnion( float d1, float d2, float k ) {
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h); }

float opSmoothSubtraction( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h); }

float opSmoothIntersection( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) + k*h*(1.0-h); }

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

vec3 color_world = vec3(0.0, 0.0, 0.0);

// perlin

//
// GLSL textureless classic 3D noise "cnoise",
// with an RSL-style periodic variant "pnoise".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-10-11
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/stegu/webgl-noise
//

vec3 mod289(vec3 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec3 P)
{
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

// Classic Perlin noise, periodic variant
float pnoise(vec3 P, vec3 rep)
{
  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}


mat3 rotation3dY(float angle) {
  float s = sin(angle);
  float c = cos(angle);

  return mat3(
    c, 0.0, -s,
    0.0, 1.0, 0.0,
    s, 0.0, c
  );
}

float saturate(float x)
{
  return clamp(x, 0.0, 1.0);
}

vec3 curl_noise(vec3 p)
{

  // return curlNoise(p);
  const float step = 0.01;
  float ddx = cnoise(p+vec3(step, 0.0, 0.0)) - cnoise(p-vec3(step, 0.0, 0.0));
  float ddy = cnoise(p+vec3(0.0, step, 0.0)) - cnoise(p-vec3(0.0, step, 0.0));
  float ddz = cnoise(p+vec3(0.0, 0.0, step)) - cnoise(p-vec3(0.0, 0.0, step));

  const float divisor = 1.0 / ( 2.0 * step );
  return ( vec3(ddy - ddz, ddz - ddx, ddx - ddy) * divisor );
}

vec3 fbm_vec3(vec3 p, float frequency, float offset)
{
  return vec3(
    cnoise((p+vec3(offset))*frequency),
    cnoise((p+vec3(offset+20.0))*frequency),
    cnoise((p+vec3(offset-30.0))*frequency)
  );
}


float map_the_world(in vec3 p)
{
    float instance_rnd_0 = generateRandomNumber(msg_frag_id + 24783442);
    float instance_rnd_1 = generateRandomNumber(msg_frag_id + 27234342);
    float instance_rnd_2 = generateRandomNumber(msg_frag_id + 74233434);

    float instance_rnd_4 = generateRandomNumber(msg_frag_id + 432212241);
    float instance_rnd_5 = generateRandomNumber(msg_frag_id + 441277122);
    float instance_rnd_6 = generateRandomNumber(msg_frag_id + 121102222);
    float instance_rnd_7 = generateRandomNumber(msg_frag_id + 400230220);

    float instance_rnd_f0 = generateRandomNumber(msg_frag_id + 462427122);
    float instance_rnd_f1= generateRandomNumber(msg_frag_id +  141874122);
    float instance_rnd_f2 = generateRandomNumber(msg_frag_id + 40021930);

    vec3 color_0 = vec3(instance_rnd_0, instance_rnd_1, instance_rnd_2);
    vec3 color_1 = vec3(instance_rnd_2, instance_rnd_1, instance_rnd_0);

    color_0 *= palette(instance_rnd_4, vec3(0.2,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );
    color_1 *= palette(instance_rnd_6,  vec3(0.2,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );

    float displacement_influence = sin(instance_rnd_0 * 5.0 * p.x + time * instance_rnd_5 * 2.0) * sin(instance_rnd_1 * 5.0 * p.y + time * instance_rnd_6* 2.0) * sin(instance_rnd_2 * 5.0 * p.z + time * instance_rnd_7 * 2.0) * 0.25;
    
    float displacement_details  =   
    0.02 * sin(p.x * 24 * 2 * instance_rnd_f0) +
    0.02 * sin(p.y * 24 * 2 * instance_rnd_f1) +
    0.02 * sin(p.y * 24 * 2 * instance_rnd_f2);
    
    displacement_details = displacement_details + 0.001 * sin(time + displacement_details * 100);
    
    displacement_influence += displacement_details;
    displacement_influence *= 0.42;
    
    float sphere_0 = distance_from_sphere(p, vec3(0.0), 1.0);
    float sphere_1 = sdSphere(p - vec3(
    1.42 * sin(time * 0.1 + instance_rnd_4 * 1000),
    2.1 * sin(time * 0.1 + instance_rnd_5 * 1000),
    1.42 * sin(time * 0.1 + instance_rnd_6 * 1000)),
    0.4);


    float sphere = opSmoothUnion(sphere_0, sphere_1, 0.1);
    
    float d0 = sphere - sphere_0;
    float d1 = sphere - sphere_1;
    float dt = (tanh( (d0 - d1) * 10 ) * 0.5) + 0.5;
    
    
    color_world = mix(color_0, color_1, dt);
    color_world *= 0.4 + 0.6 * (0.5 * sin(displacement_influence * 100 * instance_rnd_7) + 0.5);
    color_world *= 0.75 + 0.25 * pnoise(FragWorldPos * 20 + time, vec3(10, 10, 10));
    //color_world *= 0.9 + 0.1 * pnoise(p * 20 + time * 0.1, vec3(10, 10, 10));
    

    return sphere + displacement_influence;
}



float calcAO( in vec3 pos, in vec3 nor )
{
	float occ = 0.0;
    float sca = 1.0;
    for( int i=0; i<5; i++ )
    {
        float h = 0.001 + 0.15*float(i)/4.0;
        float d = map_the_world( pos + h*nor );
        occ += (h-d)*sca;
        sca *= 0.95;
    }
    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    
}

vec3 calculate_normal(in vec3 p)
{
    const vec3 small_step = vec3(0.001, 0.0, 0.0);

    float gradient_x = map_the_world(p + small_step.xyy) - map_the_world(p - small_step.xyy);
    float gradient_y = map_the_world(p + small_step.yxy) - map_the_world(p - small_step.yxy);
    float gradient_z = map_the_world(p + small_step.yyx) - map_the_world(p - small_step.yyx);

    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);

    return normalize(normal);
}

float softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float w )
{
    float res = 1.0;
    float t = mint;
    for( int i=0; i<256 && t<maxt; i++ )
    {
        float h = map_the_world(ro + t*rd);
        res = min( res, h/(w*t) );
        t += clamp(h, 0.005, 0.50);
        if( res<-1.0 || t>maxt ) break;
    }
    res = max(res,-1.0);
    return 0.25*(1.0+res)*(1.0+res)*(2.0-res);
}


vec3 ray_march(vec3 ro, vec3 rd)
{
    float total_distance_traveled = 0.0;
    const int NUMBER_OF_STEPS = 64;
    const float MINIMUM_HIT_DISTANCE = 0.002;
    const float MAXIMUM_TRACE_DISTANCE = 1000.0;
    
    for(int i = 0; i < NUMBER_OF_STEPS; i++)
    {
        // calculate our current position along the ray
        vec3 current_position = ro + total_distance_traveled * rd;
        
        //
        float distance_to_the_closest = map_the_world(current_position);
        
        if(distance_to_the_closest < MINIMUM_HIT_DISTANCE) // hit
        {
            vec3 normal = calculate_normal(current_position);
            
            // For now, hard-code the light's position in our scene
            vec3 light_position = vec3(2.0, -5.0, 3.0);
            
            // Calculate the unit direction vector that points from
            // the point of intersection to the light source
            vec3 direction_to_light = normalize(current_position - light_position);
            float diffuse_intensity = max(0.0, dot(normal, direction_to_light)) + 0.01;
            
            //return vec3(0.0, 1.0, 0.0) * diffuse_intensity;
            
            vec3 light = normalize(vec3(1));
            //float brightness = max(dot(light, normal), 0.) + 0.1;
            
            //float brightness = dot(light, normal) * 0.5 +  0.5;
            
            //float brightness = dot(light, normal);
            //brightness = mix(max(brightness, 0.0), brightness * 0.5 + 0.5, 0.2);
            
            //float brightness = 0;
            //float image = length( sin(normal * 2.5) * 0.5 + 0.5) / sqrt(3.0);
            //brightness += pow(image, 2.0);
            
            float brightness = 0;
            //float image = length( sin(normal * 2.5) * 0.5 + 0.5) / sqrt(3.0) * smoothstep(-1., 1., normal.z);
            float image = length( sin(normal * 2.5) * 0.5 + 0.5) / sqrt(3.0) * smoothstep(-1., 1., normal.y);
            //brightness += pow(image, 2.0);
            brightness += image;
            brightness = sqrt(brightness);
            //brightness *= softshadow(ro, rd, 0.1, 10.0, 8);
            
            //brightness *= calcAO( current_position,  normal);
            

            float instance_rnd_0 = generateRandomNumber(msg_frag_id + 24783442);
            float instance_rnd_1 = generateRandomNumber(msg_frag_id + 27234342);
            float instance_rnd_2 = generateRandomNumber(msg_frag_id + 74233434);

            //vec3 material = vec3(instance_rnd_0, instance_rnd_1, instance_rnd_2);


            return vec3(brightness) * color_world;

        }
        
        if(total_distance_traveled > MAXIMUM_TRACE_DISTANCE) // miss
        {
            break;
        }
        
        // accumulate the distance traveled thus far
        total_distance_traveled += distance_to_the_closest;
    }

    return vec3(0.0);
}

void main()
{
    int id = msg_frag_id;
    
    vec3 color = vec3(1.0, 1.0, 1.0);
    
    

    color.r = abs(sin(FragWorldPos.x * PI_2 * 10 + time + 1000.0 * generateRandomNumber(id)));
    color.g = abs(sin(FragWorldPos.y * PI_2 * 10 + time + 1000.0 * generateRandomNumber(id)));
    color.b = abs(sin(FragWorldPos.z * PI_2 * 10 + time + 1000.0 * generateRandomNumber(id)));
    
    color.r = 0.0;
    
    if(false)
    {
        vec2 v = vec2(FragObjectPos.x, FragObjectPos.y);
        color.g = abs(sin(FragObjectPos.x * PI_2 * 2.0));
        color.g = length(v);
        color.b = 0.0;
        
        if(msg_frag_instance_position.x < FragWorldPos.x +  0.24 * sin(FragWorldPos.y + time))
        {
            color *= 0.24;
        }
    }
    
    // Virtual
    vec3 virtual_camera_position = camera_position - msg_frag_instance_position;
    vec3 virtual_direction = normalize(FragWorldPos - camera_position);

    color = ray_march(virtual_camera_position, virtual_direction);
    
    if(color.r == 0.0 && color.g == 0 && color.b == 0)
    {
        discard;
    }
   
   if(false)
   {
        color += vec3(msg_frag_instance_position.x, msg_frag_instance_position.y, msg_frag_instance_position.z) * 0.01;
        
        if(msg_frag_instance_position.x < FragWorldPos.x)
        {
            color *= 10;
        }
    }
   

    //
    
    vec4 result = Color * 0.0+ vec4(color, 1.0);
    
    FragColor = result * 1.0;
    float factor_brightnes = dot(vec3(result), vec3(0.2126, 0.7152, 0.0722));
    if(factor_brightnes > 1.0) // transhold usually set at 1.0
    {
        BrightColor = vec4(result.x * 10.0, result.y * 10.0, result.z * 10.0, 1.0);
    }
    else
    {
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
    
}
