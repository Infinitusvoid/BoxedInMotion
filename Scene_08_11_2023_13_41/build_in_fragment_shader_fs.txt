#version 330 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;
in vec4 Color;
in vec3 FragWorldPos; // Input world space position
in vec3 FragObjectPos; // Input object space position


uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;

void main()
{
    float angle = max(dot(normalize((camera_position + camera_front) - camera_position),  normalize(vec3(0,0, 0) - FragWorldPos)), 0);


    vec3 fwp = FragWorldPos;
    vec3 fop = FragObjectPos;

    float noj_dot = dot(camera_front, normalize(fwp - camera_position));
    float camera_dist = length(fwp - camera_position);
    //float light_effect_max_distance = 1000 + 200 * sin(time * 0.0124424);
    float light_effect_max_distance = 100; // 10
    float light_effect_max_distance_factor = 1.0 / light_effect_max_distance;
    if(camera_dist > light_effect_max_distance)
    {
        camera_dist = light_effect_max_distance;
    }
    float ambient = 0.2; // 0.4
    float other_light = 1.0 - ambient;
    float exponent_angle = 0.04;
    float exponent_distance =  3;
    //float light = pow((light_effect_max_distance - camera_dist) * light_effect_max_distance_factor * (ambient + pow(noj_dot, exponent_angle) * other_light), exponent_distance);
    //float light = pow(max((light_effect_max_distance - camera_dist), 0) * light_effect_max_distance_factor * (ambient  + pow(noj_dot, exponent_angle) + other_light), exponent_distance);

    float light = max((light_effect_max_distance - camera_dist), 0);
    light *= light_effect_max_distance_factor;
    light = pow(light, exponent_distance);
    light *= (ambient + pow(noj_dot, exponent_angle) * other_light);
    vec3 color = vec3(1.0, 1.0, 1.0);

    light *= 1.47 * 2.4;

    light *= (1.0 + 0.1 * sin(camera_dist * 100 - time));

    //light *= 1 + 0.2 * abs(10 * sin(10 *  (1.0 + 2.0 * pow(abs(sin(camera_dist * 24 - time)), 10) * pow(abs(sin(time * 0.42 + camera_dist)), 10))));
    
    

    color *= vec3(Color.r * 0.2, Color.g, Color.b) * light;

    //color.g = 0.2 * abs(sin(angle * 10));
    //color.r = vec4(noj_dot * light, noj_dot * light, noj_dot * light, 1.0);
    //color = vec3(noj_dot * light, noj_dot * light, noj_dot * light);

    
    //vec4 result = Color + vec4(noj_dot * light, noj_dot * light, noj_dot * light, 1.0);
    //vec4 result = Color;
    vec4 result = vec4(color, 1.0);

    FragColor = result * 1.0;
    float factor_brightnes = dot(vec3(result), vec3(0.2126, 0.7152, 0.0722));
    if(factor_brightnes > 1.0) // transhold usually set at 1.0
    {
        BrightColor = vec4(result.x * 10.0, result.y * 10.0, result.z * 10.0, 1.0);
    }
    else
    {
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
    
}
