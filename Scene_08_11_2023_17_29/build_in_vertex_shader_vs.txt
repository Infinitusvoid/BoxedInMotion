#version 330 core
layout (location = 0) in vec3 aPos;

// Define the instance data struct
struct Instance_data
{
	mat4 model;
	vec4 color;
};

layout(location = 3) in Instance_data instanceData;

out vec4 Color;
out vec3 FragWorldPos; // World space position
out vec3 FragObjectPos; // Object space position

uniform mat4 projection;
uniform mat4 view;

uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;

// Defines constants ======================

#define PI 3.14159265359
#define TAO ( PI * 2.0 )
#define PI_2 ( PI * 2.0 )

#define SQRT_OF_2 1.4142135623730951

// cosine based palette, 4 vec3 params
vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}


// Define a function to generate a random number based on an input integer
float generateRandomNumber(int inputInt)
{
    // Cast the input integer to uint to address type mismatch
    uint seed = uint(inputInt);

    // Define the hash function
    seed = (seed ^ 61u) ^ (seed >> 16u);
    seed *= 9u;
    seed = seed ^ (seed >> 4u);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15u);

    // Normalize and return the result
    return float(seed) / 4294967296.0; // Normalize to [0, 1]
}

// Function to compute the offset for the sphere
vec3 computeSphereOffset(float latitude, float longitude, float radius)
{
    float theta = 2.0 * 3.14159265359 * latitude;
    float phi = 2.0 * 3.14159265359 * longitude;

    float x = radius * sin(theta) * cos(phi);
    float y = radius * cos(theta);
    float z = radius * sin(theta) * sin(phi);

    return vec3(x, y, z);
}

vec3 parametricCube(float u, float v, float sideLength) {
    // Map u and v values to the range [0, 1]
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    // Calculate the cube's position in 3D space
    float x = mix(-sideLength, sideLength, u); // Varies from -sideLength to sideLength
    float y = mix(-sideLength, sideLength, v); // Varies from -sideLength to sideLength
    float z = sideLength; // Fixed z value to create a surface

    return vec3(x, y, z);
}

vec3 parametricCubeSide(float u, float v, float sideLength, int face) {
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    float halfLength = sideLength / 2.0;

    // Initialize position
    vec3 position = vec3(0.0);

    if (face == 0) {  // Front face
        position = vec3(u * sideLength - halfLength, v * sideLength - halfLength, halfLength);
    } else if (face == 1) {  // Back face
        position = vec3(halfLength - u * sideLength, v * sideLength - halfLength, -halfLength);
    } else if (face == 2) {  // Top face
        position = vec3(u * sideLength - halfLength, halfLength, v * sideLength - halfLength);
    } else if (face == 3) {  // Bottom face
        position = vec3(u * sideLength - halfLength, -halfLength, v * sideLength - halfLength);
    } else if (face == 4) {  // Right face
        position = vec3(halfLength, u * sideLength - halfLength, v * sideLength - halfLength);
    } else if (face == 5) {  // Left face
        position = vec3(-halfLength, halfLength - u * sideLength, v * sideLength - halfLength);
    }

    return position;
}

vec3 parametricCubeFull(float u, float v, float sideLength)
{
    vec3 position = vec3(0.0);
    if(u < ((1.0 / 3.0) * 1.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide(u * 3.0, v * 2.0, 1000.0, 0);
        }
        else
        {
            position = parametricCubeSide(u * 3.0, (v-0.5) * 2.0, 1000.0, 1);
        }
    }
    else if(u < ((1.0 / 3.0) * 2.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0 , v * 2.0, 1000.0, 2);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 3);
        }
    }
    else
    {
         if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, v * 2.0, 1000.0, 4);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 5);
        }
    }

    return position;
}

vec3 torus(float u, float v, float r1, float r2)
{
    float x = (r1 + r2 * cos(v)) * cos(u);
    float y = (r1 + r2 * cos(v)) * sin(u);
    float z = r2 * sin(v);
    return vec3(y, z, x);
}


float  f_mask_0a(float u, float v)
{
    if(u > v)
    {
        return 1.0;
    }
    return 0.0;
}

float  f_mask_0b(float u, float v)
{
    if(u > v)
    {
        return 0.0;
    }
    return 1.0;
}

float f_mask_1(float u, float v)
{
    if(u > 0.5)
    {
        return 1.0;
    }
    return 0.0;
}

float f_mask_2(float u, float v)
{
    if(v > 0.5)
    {
        return 1.0;
    }
    return 0.0;
}

float f_mask_3(float u, float v)
{
    
    if(u < 0.5)
    {
        return f_mask_0a( fract(u * 2) , v);
    }
    else
    {
        return f_mask_0b(
            fract( (u - 0.5) * 2.0 ),
            v);
    }
    
}

float f_mask_output(float u, float v)
{
    // return min(f_mask_1(u, v) + f_mask_2(u, v), 1.0);
    return f_mask_3(u, v);
}

vec3 rnd_vec3(int seed)
{
    return vec3( generateRandomNumber(seed), generateRandomNumber((seed + 1244) * 1124), generateRandomNumber( (seed + 4714) * 4771 ) );
}

vec3 color_pallete_0(float value)
{
    return palette(value, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.30, 0.20, 0.20));
}

vec3 color_pallete_1(float value)
{
    return palette(value, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 0.7, 0.4	), vec3(0.00, 0.15, 0.20));
}

vec3 color_pallete_2(float value)
{
    return palette( value, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.30, 0.20, 0.20));
}

vec3 color_pallete_3(float value)
{
    return palette( value, vec3(0.4,0.5,0.5), vec3(0.7,0.5,0.5), vec3(1.0,1.0,2.0), vec3(0.0,0.733,0.67));
}

float map(float value, float min1, float max1, float min2, float max2)
{
    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

// ===== Landscape =====
struct Landscape
{
    float height;
    vec3 out_color;
    float local_t;     
    

    void update(float u, float v, int id)
    {
        float value = 0.0;
        
        float landscape_min = -100 * sin(u * PI);
        float landscape_max = landscape_min * ( - 1.0 );

        out_color.r = 0.0;
        out_color.g = 0.0;
        out_color.b = 0.0;

        // Tile UV
        const int num_tiles_u = 10;
        const int num_tiles_v = 70;
        vec2 tile_uv = vec2( fract( u * num_tiles_u ), fract( v * num_tiles_v ) );
    
        // Tile Index
        int tile_id_x = int(u * num_tiles_u);
        int tile_id_y = int(v * num_tiles_v);
        int tile_id = tile_id_y * num_tiles_v * tile_id_x;
        float rnd_id = generateRandomNumber(id);

    // Tile distance from center
    float d = sqrt( pow(tile_uv[1] - 0.5, 2.0) + pow(tile_uv[0] - 0.5, 2.0) );


    // floor
    float value_case_floor = 0.0;
    vec3 color_floor;
    {
        value_case_floor = landscape_min;

        float offset_up = -0.47;
        offset_up += 1.0 - d;
        offset_up *= 0.4 + 0.2* sin(local_t * 2.47 * v * 10) + pow(abs(u - 0.5) * 4, 2.0 + 1.2 * sin(local_t));
        offset_up  = max(offset_up, 0);
        float tile_rnd_height = generateRandomNumber( tile_id ) * 200;
        offset_up *= tile_rnd_height;
        
        color_floor.r = 0.0;
        color_floor.g = tile_uv[0] * 0.2;
        color_floor.b = tile_uv[1] * 0.2;
       
        value_case_floor += offset_up;

        value_case_floor = min(value_case_floor, landscape_max);    
    }

    // Value case sealing
    float value_case_sealing = 0.0;
    vec3 color_sealing;
    // sealing
    {
        value_case_sealing = landscape_max;

        color_sealing = vec3(0.2, 0.2, 0.2) + vec3(0.0, 0.1 * abs(sin(-local_t + value_case_sealing * 0.2 - v * 100)), 0.0);

        value = max(value_case_sealing, landscape_min);
    }
    


    if( rnd_id > 0.5 )
    {
        value = value_case_floor;
        out_color = color_floor;
    }
    else
    {
        value = value_case_sealing;
        out_color = color_sealing;
    }
    

    {
        float factor_color = map(value, landscape_min, landscape_max, 0.0, 1.0);
        out_color = mix(color_floor, color_sealing, factor_color);
    }

    height = value;
    }
};

Landscape landscape;

// =====================

void main()
{
	int id = gl_InstanceID;
	FragObjectPos = aPos; // Store the object space position
	//FragWorldPos = vec3(instanceData.model * vec4(aPos, 1.0)); // Calculate world space position
	Color = instanceData.color;

    float ttime = time;

	float u = float(id % 1000) * 0.001;
	float v = float(id / 1000) * 0.001;
	
    u = generateRandomNumber(id * 2134124);
    v = generateRandomNumber(id * 4231444);
    
    // u = round(fract(u + ttime * 0.0042) * 24) * 0.01;
    // v = round(fract(v + ttime * 0.0042) * 100) * 0.01;

    int iv_num = 1000000 / (24 * 100);
    int iv = id % iv_num;
    int index_iv = id / iv_num;

    vec3 offset = vec3(0.0, 0.0, 0.0);

    // vec3 offset_sphere = computeSphereOffset(u, v, 1000.0);
    // vec3 offset_parametric_cube = parametricCubeFull(u, v, 1000);
    // vec3 offset_2 = torus(u * PI_2 + x_offset, v * PI_2 + y_offset, 1000.0, 100.0 + v_offset);

    // float freq_rnd_0 = 0.01 + generateRandomNumber(index_iv * 4141232) * 0.0429;

    float r = 0.1;
    float g = 0.1;
    float b = 0.1;
    
    
    v = fract(time * 0.1 + v);
    

    vec3 offset_n = vec3(0.0, 0.0, 0.0);
    float scale_factor = 0.1 + (1-v) * 2;
    float size_exponent = 0.2;
    
    v = pow(v, size_exponent);
 
    // landscape_min = -100 * sin(u * PI);
    // landscape_max = 100 * sin(u * PI);
    
    landscape.local_t = ttime;
    landscape.update(u, v, id);
    offset_n = vec3(u * PI_2 * 42, landscape.height, v * 2000);

    // output
    offset = offset_n;

    vec3 color = landscape.out_color;

    vec3 scale = vec3(1.0, 1.0, 1.0) * scale_factor;

    // output
    Color = vec4(color, 1.0);
	gl_Position = projection * view * instanceData.model * vec4(aPos * scale + offset, 1.0);
    FragWorldPos = vec3(instanceData.model * vec4(aPos * scale + offset, 1.0)); // Calculate world space position
}
