#version 330 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;
in vec4 Color;
in vec3 FragWorldPos; // Input world space position
in vec3 FragObjectPos; // Input object space position


uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;

void main()
{
   vec4 result = Color;// + vec4(0.5 * sin(FragWorldPos.x * 7.0 + time), 0.5 * sin(FragWorldPos.y * 2.0 + time), 0.5 * sin(FragWorldPos.z * 10.0 + time), 1.0);
   float fak = FragWorldPos.x * FragWorldPos.x + FragWorldPos.y * FragWorldPos.y + FragWorldPos.z * FragWorldPos.z;
   fak *= 10.0;
   fak += -time * 10.0;
   result = result + vec4(sin(fak * 0.2), sin(fak * 0.4), sin(fak * 0.7), 1.0f) * vec4(sin(fak * 0.4), sin(fak * 0.7), sin(fak * 0.22), 1.0f);
   FragColor = result;

   float factor_brightnes = dot(vec3(result), vec3(0.2126, 0.7152, 0.0722));
   if(factor_brightnes > 1.0) // transhold usually set at 1.0
   {
     BrightColor = vec4(result.x * 4.0, result.y * 4.0, result.z * 4.0, 1.0);
   }
   else
   {
     BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
   }

}
