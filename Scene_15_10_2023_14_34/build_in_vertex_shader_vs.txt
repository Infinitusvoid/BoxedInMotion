#version 330 core
layout (location = 0) in vec3 aPos;

// Define the instance data struct
struct Instance_data
{
	mat4 model;
	vec4 color;
};

layout(location = 3) in Instance_data instanceData;

out vec4 Color;
out vec3 FragWorldPos; // World space position
out vec3 FragObjectPos; // Object space position

uniform mat4 projection;
uniform mat4 view;

uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;


// Function to compute the offset for the sphere
vec3 computeSphereOffset(float latitude, float longitude, float radius)
{
    float theta = 2.0 * 3.14159265359 * latitude;
    float phi = 2.0 * 3.14159265359 * longitude;

    float x = radius * sin(theta) * cos(phi);
    float y = radius * cos(theta);
    float z = radius * sin(theta) * sin(phi);

    return vec3(x, y, z);
}

vec3 parametricCube(float u, float v, float sideLength) {
    // Map u and v values to the range [0, 1]
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    // Calculate the cube's position in 3D space
    float x = mix(-sideLength, sideLength, u); // Varies from -sideLength to sideLength
    float y = mix(-sideLength, sideLength, v); // Varies from -sideLength to sideLength
    float z = sideLength; // Fixed z value to create a surface

    return vec3(x, y, z);
}

vec3 parametricCubeSide(float u, float v, float sideLength, int face) {
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    float halfLength = sideLength / 2.0;

    // Initialize position
    vec3 position = vec3(0.0);

    if (face == 0) {  // Front face
        position = vec3(u * sideLength - halfLength, v * sideLength - halfLength, halfLength);
    } else if (face == 1) {  // Back face
        position = vec3(halfLength - u * sideLength, v * sideLength - halfLength, -halfLength);
    } else if (face == 2) {  // Top face
        position = vec3(u * sideLength - halfLength, halfLength, v * sideLength - halfLength);
    } else if (face == 3) {  // Bottom face
        position = vec3(u * sideLength - halfLength, -halfLength, v * sideLength - halfLength);
    } else if (face == 4) {  // Right face
        position = vec3(halfLength, u * sideLength - halfLength, v * sideLength - halfLength);
    } else if (face == 5) {  // Left face
        position = vec3(-halfLength, halfLength - u * sideLength, v * sideLength - halfLength);
    }

    return position;
}

vec3 parametricCubeFull(float u, float v, float sideLength)
{
    vec3 position = vec3(0.0);
    if(u < ((1.0 / 3.0) * 1.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide(u * 3.0, v * 2.0, 1000.0, 0);
        }
        else
        {
            position = parametricCubeSide(u * 3.0, (v-0.5) * 2.0, 1000.0, 1);
        }
    }
    else if(u < ((1.0 / 3.0) * 2.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0 , v * 2.0, 1000.0, 2);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 3);
        }
    }
    else
    {
         if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, v * 2.0, 1000.0, 4);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 5);
        }
    }

    return position;
}


// Define a function to generate a random number based on an input integer
float generateRandomNumber(int inputInt) {
    // Cast the input integer to uint to address type mismatch
    uint seed = uint(inputInt);

    // Define the hash function
    seed = (seed ^ 61u) ^ (seed >> 16u);
    seed *= 9u;
    seed = seed ^ (seed >> 4u);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15u);

    // Normalize and return the result
    return float(seed) / 4294967296.0; // Normalize to [0, 1]
}

void main()
{
	int id = gl_InstanceID;
	FragObjectPos = aPos; // Store the object space position
	FragWorldPos = vec3(instanceData.model * vec4(aPos, 1.0)); // Calculate world space position
	Color = instanceData.color;

    

	float u = float(id % 1000) * 0.001;
	float v = float(id / 1000) * 0.001;
	
    
    int id_global = id / 10000;
    
    int id_local = id % 10000;
    float u_local = float(id_local % 100) * 0.01;
    float v_local = float(id_local / 100) * 0.01;
    

    vec3 offset = vec3(0.0, 0.0, 0.0);

    float value_0 = generateRandomNumber(id);
    float value_1 = generateRandomNumber(id + 9291831);

    float value_0_v0 = generateRandomNumber(id + 1231514512) - 0.5;
    float value_1_v1= generateRandomNumber(id + 912311) - 0.5;



    //offset = computeSphereOffset(u + value_0 + sin(value_0_v0 + time * 0.001), v + value_1 + sin(value_1_v1 + time * 0.001), 1000);

    // for each planet
    float size_of_planet = 240 + generateRandomNumber(id_global + 212424) * 240;
    
    // 0 u, v
    // u
    float wave_0_frequency_u  = generateRandomNumber(id_global + 42424) * 75;
    float wave_0_speed_u = generateRandomNumber(id_global + 4124093) * 10;
    float wave_0_amplitude_u = 5 + 100 * generateRandomNumber(id_global + 2441732);
    float wave_0_u = wave_0_amplitude_u * sin(u_local * wave_0_frequency_u + time * wave_0_speed_u);
    // v
    float wave_0_frequency_v  = generateRandomNumber(id_global + 2122234) * 75;
    float wave_0_speed_v = generateRandomNumber(id_global + 410323) * 10;
    float wave_0_amplitude_v = 5 + 100 * generateRandomNumber(id_global + 24133);
    float wave_0_v = wave_0_amplitude_v * sin(u_local * wave_0_frequency_v + time * wave_0_speed_v);
    
    // 1 u, v
    // u
    float wave_1_frequency_u  = generateRandomNumber(id_global + 922424) * 100;
    float wave_1_speed_u = generateRandomNumber(id_global + 11240993) * 10;
    float wave_1_amplitude_u = 5 + 100 * generateRandomNumber(id_global + 7417732);
    float wave_1_u = wave_1_amplitude_u * sin(u_local * wave_1_frequency_u + time * wave_1_speed_u);
    // v
    float wave_1_frequency_v  = generateRandomNumber(id_global + 2122234) * 40;
    float wave_1_speed_v = generateRandomNumber(id_global + 412223) * 5;
    float wave_1_amplitude_v = 5 + 25 * generateRandomNumber(id_global + 4001210);
    float wave_1_v = wave_1_amplitude_v * sin(u_local * wave_1_frequency_v + time * wave_1_speed_v);

    float wave =  wave_0_u + wave_0_v + wave_1_u + wave_1_v;
    wave *= 0.4;
    
    
   
    float v_local_nja_global = generateRandomNumber(id_global * 4007) * 4;
    
    
    offset = computeSphereOffset(u_local, v_local, size_of_planet + wave * v_local_nja_global);

    // offset planet
    float radius = 4000 + generateRandomNumber(id_global) * 2000;
    
    float angle_0 = generateRandomNumber(id_global + 2132132);
    angle_0 *= 3.1415 * 2.0;
    
    float angle_1 = generateRandomNumber(id_global + 712424);
    angle_1 *= 3.1415 * 2.0;

    float velocity_0 = generateRandomNumber(id_global + 212424);
    velocity_0 *= 0.1 * 0.2;
    
    float offset_up_down = 0.0;
    offset_up_down += 0.02 * sin(time * 0.2);
    offset_up_down += 0.02 * sin(time * 0.7);
    offset_up_down += 0.004 * pow(sin(time * 2.1447), 2.0);
    offset_up_down += 0.010 * pow(sin(time * 0.1447), 1.0);

    vec3 offset_planet = computeSphereOffset(angle_1 + offset_up_down, angle_0 + time * velocity_0, radius);

    offset += offset_planet;


    //  the color

     float planet_rnd_0  = generateRandomNumber(id_global + 21001224);
     float planet_rnd_1  = generateRandomNumber(id_global + 10022114);
     float planet_rnd_2  = generateRandomNumber(id_global + 400242144);
     float planet_rnd_3  = generateRandomNumber(id_global + 40022444);
     float planet_rnd_4  = generateRandomNumber(id_global + 41244462);

    float r = 0.0;
    float g = 0.4 * pow(abs(wave * 0.04), 10) * 0.2 * 0.2 * 0.2 * 0.2;//clamp(2.0, 0, (value_0_v0 + 0.5) * 1.4);
    float b = 0.2 + 10 * abs(sin(offset_up_down * 1000));//clamp(2.0, 0, (value_1_v1 + 0.5) * 1.4);
    

    r = 0.0f;//u_local;//((0.5 - 0.5 * sin(wave)) * 2.0) * 0.2;
    g = (0.5 - 0.5 * sin(22 * v_local * 3.1415 * 2.0)) * 1.1;
    b = (0.5 - 0.5 * sin(10 * u_local * 3.1415 * 2.0)) * 1.1;
    
    float value_r = mod(u_local * 10 + time, 1.0) * 1.1;
    value_r += mod(u_local * 7 - time * 0.7, 1.0) * 1.1;
    r = abs(sin(value_r + planet_rnd_0 * 100));
    

    float value_g = pow(mod(v_local * (4 + planet_rnd_1 * 6) + time, 1.0), 4.0) * 1.1;
    value_g += mod(v_local * (2 + 7 * planet_rnd_2) - time * 0.7, 1.0) * 1.1;
    

    g = value_g;
    b = sin( (value_r + value_g) * 10.0);

    
    
    b = pow(mod((r * b) * 10 * planet_rnd_3, 1.0), planet_rnd_4);


    


    Color = vec4(r, g, b, 1.0);


	gl_Position = projection * view * instanceData.model * vec4(aPos + offset, 1.0);
}
