#version 330 core
layout (location = 0) in vec3 aPos;

// Define the instance data struct
struct Instance_data
{
	mat4 model;
	vec4 color;
};

layout(location = 3) in Instance_data instanceData;

out vec4 Color;
out vec3 FragWorldPos; // World space position
out vec3 FragObjectPos; // Object space position

uniform mat4 projection;
uniform mat4 view;

uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;


// Function to compute the offset for the sphere
vec3 computeSphereOffset(float latitude, float longitude, float radius)
{
    float theta = 2.0 * 3.14159265359 * latitude;
    float phi = 2.0 * 3.14159265359 * longitude;

    float x = radius * sin(theta) * cos(phi);
    float y = radius * cos(theta);
    float z = radius * sin(theta) * sin(phi);

    return vec3(x, y, z);
}

vec3 parametricCube(float u, float v, float sideLength) {
    // Map u and v values to the range [0, 1]
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    // Calculate the cube's position in 3D space
    float x = mix(-sideLength, sideLength, u); // Varies from -sideLength to sideLength
    float y = mix(-sideLength, sideLength, v); // Varies from -sideLength to sideLength
    float z = sideLength; // Fixed z value to create a surface

    return vec3(x, y, z);
}

vec3 parametricCubeSide(float u, float v, float sideLength, int face) {
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    float halfLength = sideLength / 2.0;

    // Initialize position
    vec3 position = vec3(0.0);

    if (face == 0) {  // Front face
        position = vec3(u * sideLength - halfLength, v * sideLength - halfLength, halfLength);
    } else if (face == 1) {  // Back face
        position = vec3(halfLength - u * sideLength, v * sideLength - halfLength, -halfLength);
    } else if (face == 2) {  // Top face
        position = vec3(u * sideLength - halfLength, halfLength, v * sideLength - halfLength);
    } else if (face == 3) {  // Bottom face
        position = vec3(u * sideLength - halfLength, -halfLength, v * sideLength - halfLength);
    } else if (face == 4) {  // Right face
        position = vec3(halfLength, u * sideLength - halfLength, v * sideLength - halfLength);
    } else if (face == 5) {  // Left face
        position = vec3(-halfLength, halfLength - u * sideLength, v * sideLength - halfLength);
    }

    return position;
}

vec3 parametricCubeFull(float u, float v, float sideLength)
{
    vec3 position = vec3(0.0);
    if(u < ((1.0 / 3.0) * 1.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide(u * 3.0, v * 2.0, 1000.0, 0);
        }
        else
        {
            position = parametricCubeSide(u * 3.0, (v-0.5) * 2.0, 1000.0, 1);
        }
    }
    else if(u < ((1.0 / 3.0) * 2.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0 , v * 2.0, 1000.0, 2);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 3);
        }
    }
    else
    {
         if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, v * 2.0, 1000.0, 4);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 5);
        }
    }

    return position;
}

void main()
{
	int id = gl_InstanceID;
	FragObjectPos = aPos; // Store the object space position
	FragWorldPos = vec3(instanceData.model * vec4(aPos, 1.0)); // Calculate world space position
	Color = instanceData.color;

	float u = float(id % 1000) * 0.001;
	float v = float(id / 1000) * 0.001;
	
    
    vec3 offset = vec3(0.0, 0.0, 0.0);


    float t_signal_0 = pow(abs(sin(time * 0.1)), 4.0);
    float t_signal_1 = 100 * sin((u + v) * 100.0  + time);
    float t_signal_n = pow(abs(t_signal_1)*0.01, 2.0 + 7.0 * abs(sin(time * 10 + u * 200)));
    t_signal_n = clamp(t_signal_n, 0.0, 1.0);

	vec3 offset_0 = computeSphereOffset(u, v, 1000.0 + t_signal_1);
    
   
    vec3 offset_1 = parametricCubeFull(u, v, 1000);
    
    
    //t_signal_0  = 0.0;

    offset = mix(offset_0, offset_1, t_signal_0);

	

	Color = vec4(0.2, 0.4 + 0.1 * sin(t_signal_0), 0.2 + 0.2 * sin(t_signal_1), 1.0) + vec4(0.0, t_signal_n, 0.0, 1.0);


	gl_Position = projection * view * instanceData.model * vec4(aPos + offset, 1.0);
}
