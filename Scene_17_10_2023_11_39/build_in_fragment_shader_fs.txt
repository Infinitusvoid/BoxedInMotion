#version 330 core
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;
in vec4 Color;
in vec3 FragWorldPos; // Input world space position
in vec3 FragObjectPos; // Input object space position


uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;



// Defines constants ======================

#define PI 3.14159265359
#define TAO ( PI * 2.0 )
#define PI_2 ( PI * 2.0 )

#define SQRT_OF_2 1.4142135623730951

// ========================================


// Additional inputs
flat in int instanceID;

flat in vec3 frag_msg_tile_off;
// 

void main()
{
    vec3 color = vec3(0.0, 0.0, 0.0);
    
    //color.r = 1.0 + sin(FragWorldPos.x * 10);
    //color.g = 1.0 + sin(FragWorldPos.y * 10);
    //color.b = 1.0 + sin(FragWorldPos.y * 10);
    
    //color.r = sin(frag_msg_tile_off.x * 10 * PI_2);
    //color.g = sin(frag_msg_tile_off.y * 100 * PI_2);
    //color.b = sin(frag_msg_tile_off.z * 10 * PI_2);
  

    vec4 result = Color + vec4(color, 1.0);
    FragColor = result * 1.0;
    float factor_brightnes = dot(vec3(result), vec3(0.2126, 0.7152, 0.0722));
    if(factor_brightnes > 1.0) // transhold usually set at 1.0
    {
        BrightColor = vec4(result.x * 10.0, result.y * 10.0, result.z * 10.0, 1.0);
    }
    else
    {
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
    
}
