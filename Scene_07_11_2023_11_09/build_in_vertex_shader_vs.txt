#version 330 core
layout (location = 0) in vec3 aPos;

// Define the instance data struct
struct Instance_data
{
	mat4 model;
	vec4 color;
};

layout(location = 3) in Instance_data instanceData;

out vec4 Color;
out vec3 FragWorldPos; // World space position
out vec3 FragObjectPos; // Object space position

uniform mat4 projection;
uniform mat4 view;

uniform vec3 camera_position;
uniform vec3 camera_front;
uniform vec3 camera_right;
uniform vec3 camera_up;
uniform float camera_zoom;
uniform int frame;
uniform float time;

// Defines constants ======================

#define PI 3.14159265359
#define TAO ( PI * 2.0 )
#define PI_2 ( PI * 2.0 )

#define SQRT_OF_2 1.4142135623730951

// cosine based palette, 4 vec3 params
vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}


// Define a function to generate a random number based on an input integer
float generateRandomNumber(int inputInt)
{
    // Cast the input integer to uint to address type mismatch
    uint seed = uint(inputInt);

    // Define the hash function
    seed = (seed ^ 61u) ^ (seed >> 16u);
    seed *= 9u;
    seed = seed ^ (seed >> 4u);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15u);

    // Normalize and return the result
    return float(seed) / 4294967296.0; // Normalize to [0, 1]
}

// Function to compute the offset for the sphere
vec3 computeSphereOffset(float latitude, float longitude, float radius)
{
    float theta = 2.0 * 3.14159265359 * latitude;
    float phi = 2.0 * 3.14159265359 * longitude;

    float x = radius * sin(theta) * cos(phi);
    float y = radius * cos(theta);
    float z = radius * sin(theta) * sin(phi);

    return vec3(x, y, z);
}

vec3 parametricCube(float u, float v, float sideLength) {
    // Map u and v values to the range [0, 1]
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    // Calculate the cube's position in 3D space
    float x = mix(-sideLength, sideLength, u); // Varies from -sideLength to sideLength
    float y = mix(-sideLength, sideLength, v); // Varies from -sideLength to sideLength
    float z = sideLength; // Fixed z value to create a surface

    return vec3(x, y, z);
}

vec3 parametricCubeSide(float u, float v, float sideLength, int face) {
    u = clamp(u, 0.0, 1.0);
    v = clamp(v, 0.0, 1.0);

    float halfLength = sideLength / 2.0;

    // Initialize position
    vec3 position = vec3(0.0);

    if (face == 0) {  // Front face
        position = vec3(u * sideLength - halfLength, v * sideLength - halfLength, halfLength);
    } else if (face == 1) {  // Back face
        position = vec3(halfLength - u * sideLength, v * sideLength - halfLength, -halfLength);
    } else if (face == 2) {  // Top face
        position = vec3(u * sideLength - halfLength, halfLength, v * sideLength - halfLength);
    } else if (face == 3) {  // Bottom face
        position = vec3(u * sideLength - halfLength, -halfLength, v * sideLength - halfLength);
    } else if (face == 4) {  // Right face
        position = vec3(halfLength, u * sideLength - halfLength, v * sideLength - halfLength);
    } else if (face == 5) {  // Left face
        position = vec3(-halfLength, halfLength - u * sideLength, v * sideLength - halfLength);
    }

    return position;
}

vec3 parametricCubeFull(float u, float v, float sideLength)
{
    vec3 position = vec3(0.0);
    if(u < ((1.0 / 3.0) * 1.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide(u * 3.0, v * 2.0, 1000.0, 0);
        }
        else
        {
            position = parametricCubeSide(u * 3.0, (v-0.5) * 2.0, 1000.0, 1);
        }
    }
    else if(u < ((1.0 / 3.0) * 2.0) )
    {
        if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0 , v * 2.0, 1000.0, 2);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 1.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 3);
        }
    }
    else
    {
         if(v < 0.5)
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, v * 2.0, 1000.0, 4);
        }
        else
        {
            position = parametricCubeSide((u - ((1.0 / 3.0) * 2.0)) * 3.0, (v-0.5) * 2.0, 1000.0, 5);
        }
    }

    return position;
}

vec3 torus(float u, float v, float r1, float r2)
{
    float x = (r1 + r2 * cos(v)) * cos(u);
    float y = (r1 + r2 * cos(v)) * sin(u);
    float z = r2 * sin(v);
    return vec3(y, z, x);
}


float  f_mask_0a(float u, float v)
{
    if(u > v)
    {
        return 1.0;
    }
    return 0.0;
}

float  f_mask_0b(float u, float v)
{
    if(u > v)
    {
        return 0.0;
    }
    return 1.0;
}

float f_mask_1(float u, float v)
{
    if(u > 0.5)
    {
        return 1.0;
    }
    return 0.0;
}

float f_mask_2(float u, float v)
{
    if(v > 0.5)
    {
        return 1.0;
    }
    return 0.0;
}

float f_mask_3(float u, float v)
{
    
    if(u < 0.5)
    {
        return f_mask_0a( fract(u * 2) , v);
    }
    else
    {
        return f_mask_0b(
            fract( (u - 0.5) * 2.0 ),
            v);
    }
    
}

float f_mask_output(float u, float v)
{
    // return min(f_mask_1(u, v) + f_mask_2(u, v), 1.0);
    return f_mask_3(u, v);
}

vec3 rnd_vec3(int seed)
{
    return vec3( generateRandomNumber(seed), generateRandomNumber((seed + 1244) * 1124), generateRandomNumber( (seed + 4714) * 4771 ) );
}

vec3 color_pallete_0(float value)
{
    return palette(value, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.30, 0.20, 0.20));
}

vec3 color_pallete_1(float value)
{
    return palette(value, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 0.7, 0.4	), vec3(0.00, 0.15, 0.20));
}

vec3 color_palette_terrain(float value)
{
    return palette( value, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.30, 0.20, 0.20));
}

void main_before()
{
int id = gl_InstanceID;
	FragObjectPos = aPos; // Store the object space position
	//FragWorldPos = vec3(instanceData.model * vec4(aPos, 1.0)); // Calculate world space position
	Color = instanceData.color;

    float ttime = time;

	float u = float(id % 1000) * 0.001;
	float v = float(id / 1000) * 0.001;
	
    u = generateRandomNumber(id * 2134124);
    v = generateRandomNumber(id * 4231444);
    
    u = fract(u + ttime * 0.0042) * 0.42 * 0.7;
    v = fract(v + ttime * 0.0042);

    vec3 offset = vec3(0.0, 0.0, 0.0);

	vec3 offset_0 = computeSphereOffset(u, v, 1000.0);
    vec3 offset_1 = parametricCubeFull(u, v, 1000);


    float offset_r0 = 10 * sin(v * PI_2 * 10 + time * 0.24) * 0.1;
    float offset_r1 = 42 * sin(u * PI_2 * 10 + time * 0.24) * 0.1;

   

    // offset = mix(offset_0, offset_2, abs(sin(time)) );
    // offset = mix(offset, offset_1, abs(sin(time * 0.1)) );
    // offset = offset_2 * 0.5 * 0.5 * cos(time) + 0.5 * offset_0 * 0.5 * sin(time);
    // offset = offset_2 * sin(- 0.12 * time) + offset_0 * sin(time * 0.2)+ offset_1 * sin(time * 0.24);
    

    // float r = fract(FragWorldPos.y * 0.01);
    float r = fract( abs(sin(offset.y * 0.1 + u)) );
    float g = fract(offset_r0 * 0.1);
    float b = pow(fract(offset_r1 + time * offset_r0 * 0.01), 2.0) * 4.0;
    

    float v_light = 0.0;
    float u_scale = 42 * 6;
    float v_scale = 44;

    float u2 = fract(u * u_scale + time);
    float v2 = fract(v * v_scale);

    int u2i = int(u * u_scale + time);
    int v2i = int(v * v_scale);

    float rnd_u_0 = generateRandomNumber(u2i);
    float rnd_v_0 = generateRandomNumber(v2i);


     vec3 color_pallete_0 = color_pallete_0(u2);
    
    //float dc_out = sqrt(pow((u2 - 0.5), 2.0) + pow(v2 - 0.5, 2.0));
    float dc_out = max(abs(u2 - 0.5), abs(v2 - 0.5));
    dc_out = fract(dc_out * (1 + 7 * sin(rnd_u_0 * 17328173) + 2 * sin(rnd_v_0 * 7712.0)) + time * 0.1);

    vec3 color_pallete_1 = color_pallete_1(dc_out);
    
    
    
    float color_mix_0 = fract(rnd_u_0 * 171.2 + rnd_v_0 * 112.2);




    r = color_pallete_0.r * color_mix_0 * 0.5;
    g = color_pallete_0.g * color_mix_0 * 0.5;
    b = color_pallete_0.b * color_mix_0 * 0.5;

    r += color_pallete_1.r * 0.5;
    g += color_pallete_1.g * 0.5;
    b += color_pallete_1.b * 0.5; 


    float terrain = 0.0;
    terrain += abs(u2 - 0.5);
    terrain = max(terrain, abs(v2 - 0.5));
    terrain *= (10 + 2 * sin(time * rnd_u_0 * 24 * rnd_v_0 + rnd_u_0 * 4117.772 + rnd_v_0 *  22.1144));


    vec3 color_terrain = color_palette_terrain( pow(abs(1.0 - terrain * 0.11), 1.2) );

    float factor_terrain = pow(abs( sin(float(v2i * u2i + rnd_u_0 * 22.11 + rnd_v_0 * 11.22) * 0.1 + time) ), 4.0);
    
    if(factor_terrain < 0.7 + sin(time * 0.1 + u2 + v2) * 0.2)
    {
        factor_terrain = 0.0;
    }
    else
    {
        float factor_other = 1.0 - factor_terrain;
        color_terrain *= factor_terrain;
        r *= (factor_other + color_terrain.r) * 0.4;
        g *= (factor_other + color_terrain.g) * 0.4;
        b *= (factor_other + color_terrain.b) * 0.4; 
    }
    

    
    // Torus 
    // float axial_offset = 24 * sin(v * PI_2 + time * u * 24);
    // axial_offset *= sin(u * 10 - time * 0.2);
    // float xv = v * PI_2;
    // float axial_offset =  (sin(3*xv) / 3 + sin(5 * xv) / 5 +  sin( 7 * xv ) /  7);
    // axial_offset *= 100.0;
    
    // vec3 offset_2 = torus(u * PI_2, v * PI_2, 1000.0 + offset_r1, 100.0 + offset_r0 + terrain);
    // offset = offset_2;

    offset = vec3(u * 10, v * 10, 0);
    
    


    
    vec3 color = vec3(r, g, b);
	


    

    vec3 scale = vec3(1.0, 1.0, 1.0);

    // output
    Color = vec4(color, 1.0);
	gl_Position = projection * view * instanceData.model * vec4(aPos * scale + offset, 1.0);
    FragWorldPos = vec3(instanceData.model * vec4(aPos * scale + offset, 1.0)); // Calculate world space position

}


vec2 to_polar(vec2 xy, vec2 center)
{
    vec2 v_center = xy - center;
    float radius = length( v_center );
    float angle = atan(v_center.y, v_center.x);
    return vec2(radius, angle);
}

vec2 polar_to_rect(vec2 ra, vec2 center)
{
    return vec2(
        center.x + ra[0] * sin(ra[1]),
        center.y + ra[0] * cos(ra[1])
    );
}

int draw_0(float u, float v, float px, float py, float thickness)
{
    if(
        abs(u - px) < thickness ||
        abs(v - py) < thickness 
    )
    {
        return 1;
    }
    return 0;
}

void main()
{
	int id = gl_InstanceID;
	FragObjectPos = aPos; // Store the object space position
	//FragWorldPos = vec3(instanceData.model * vec4(aPos, 1.0)); // Calculate world space position
	Color = instanceData.color;

    float ttime = time;

	float u = float(id % 1000) * 0.001;
	float v = float(id / 1000) * 0.001;
	
    u = generateRandomNumber(id * 2134124);
    v = generateRandomNumber(id * 4231444);
    
    vec3 offset = vec3(u * 1000, v * 1000, 0.0);
    
    float r = 0.04;
    float g = 0.2;
    float b = 0.2;



    vec2 center_uv = vec2(0.5, 0.5);
    vec2 polar_ra = to_polar(vec2(u, v), center_uv );
    if(polar_ra[0] < 0.1 && polar_ra[0] > 0.09)
    {
        g = 1.0; // abs(sin(polar_ra[0] * PI_2 * 10)) * 10;
    }

    
    vec2 the_fly_offset_xy = (0.5 * vec2(sin(time), cos(time)));
    
    vec2 polar_ra_0 = to_polar(vec2(u, v), center_uv + the_fly_offset_xy );
    vec2 euler_xy_0 = center_uv + the_fly_offset_xy;
    if(polar_ra_0[0] < 0.05 && polar_ra_0[0] > 0.04)
    {
       b = 1.0;
    }

    // r = abs( sin( 24 * min( length( euler_xy_0 - center_uv ), length(vec2(u, v) - center_uv )) ) );
    // if(abs(euler_xy_0.x) < 0.1 && abs(euler_xy_0.y) < 0.1)
    // if( abs( the_fly_offset_xy.x - u ) < 0.5 )
    // if( abs( the_fly_offset_xy.y - v ) <  abs( the_fly_offset_xy.y - v - 0.01) )
    // {
    //     r = 0.74;
    // }

    float offset_x = the_fly_offset_xy.x;
    float offset_y = the_fly_offset_xy.y;

    if( draw_0(u, v, offset_x + 0.5, offset_y + 0.5, 0.01) == 1)
    {
        r = 0.74;
    }

    /*
    if (
    abs(u - 0.5 - offset_x) < 0.01 ||
    abs(v - 0.5 - offset_y) < 0.01
    )
    {
        r = 0.74;
    }
    */

    /*
    vec2 polar_ra = to_polar(vec2(u, v), vec2(0.5, 0.5));

    float radius = polar_ra[0];
    float angle = polar_ra[1];

    if(radius < 0.5 && radius > 0.49)
    {
       g *= 2.0;
    }
    
    
    float angle_0_to_1 = ( angle + PI ) / ( PI_2 );

    if(fract( angle_0_to_1 * 12) > 0.1 && fract(angle_0_to_1 * 12) < 0.16)
    {
        if(radius < 0.5)
        {
            r = 0.7;
        }
        else
        {
            b = 0.9;
        }
        
    }

    float ft = fract( - time * 0.1);
    if(ft > angle_0_to_1 && ft < angle_0_to_1 + 0.02)
    {
        g *= 0.47;


        float angle_0 = (ft + angle_0_to_1 + 0.02) / 2.0;
        float radius_0 = 0.5;

        vec2 xy_0 = polar_to_rect( vec2(radius_0, angle_0), vec2( 0.5 * sin(-time * 0.1), 0.5 * cos(-time * 0.1) ) );

        vec2 polar_0 = to_polar(vec2(u, v), xy_0);

        if(polar_0[0] < 0.1)
        {
            r = 2.0;
        }

    }
    */
    

    // output

    vec3 color = vec3(r, g, b);
	vec3 scale = vec3(1.0, 1.0, 1.0);

    // output
    Color = vec4(color, 1.0);
	gl_Position = projection * view * instanceData.model * vec4(aPos * scale + offset, 1.0);
    FragWorldPos = vec3(instanceData.model * vec4(aPos * scale + offset, 1.0)); // Calculate world space position
}
